




Explanation:
Bipartite Graph: A graph is bipartite if we can color all vertices using two colors such that no two adjacent vertices share the same color.

We use BFS and assign alternating colors to each connected component.

If during traversal we find adjacent nodes with the same color, the graph is not bipartite.

The graph may be disconnected, so we check each unvisited node.




import java.util.*;

public class Solution {
    
    // BFS function to check bipartiteness from a starting node
    private boolean isBipartiteComponent(int start, List<List<Integer>> adj, int[] color) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        color[start] = 0;

        while (!queue.isEmpty()) {
            int node = queue.poll();

            for (int neighbor : adj.get(node)) {
                if (color[neighbor] == -1) {
                    color[neighbor] = 1 - color[node]; // assign opposite color
                    queue.offer(neighbor);
                } else if (color[neighbor] == color[node]) {
                    // same color detected on adjacent node
                    return false;
                }
            }
        }
        return true;
    }

    public boolean isBipartite(int V, List<List<Integer>> adj) {
        int[] color = new int[V];
        Arrays.fill(color, -1); // initialize all vertices as uncolored

        for (int i = 0; i < V; i++) {
            if (color[i] == -1) {
                if (!isBipartiteComponent(i, adj, color)) {
                    return false;
                }
            }
        }
        return true;
    }

    // For testing
    public static void main(String[] args) {
        int V = 4;
        List<List<Integer>> adj = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        addEdge(adj, 0, 2);
        addEdge(adj, 0, 3);
        addEdge(adj, 2, 3);
        addEdge(adj, 3, 1);

        Solution solution = new Solution();
        boolean result = solution.isBipartite(V, adj);
        System.out.println(result ? "1" : "0");  // Output: 0
    }

    private static void addEdge(List<List<Integer>> adj, int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }
}
