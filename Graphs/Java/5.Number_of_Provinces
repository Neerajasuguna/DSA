

Given an undirected graph with V vertices. Two vertices u and v belong to a single province if there is a path from u to v or v to u.
Find the number of provinces. The graph is given as an n x n matrix adj where adj[i][j] = 1 if the ith city and the jth city are directly connected, and adj[i][j] = 0 otherwise.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.



DFS Solution 


public class NumberOfProvinces {

    public static int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean[] visited = new boolean[n];
        int count = 0;

        // Loop through each city
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(isConnected, visited, i);
                count++; // one complete component = one province
            }
        }

        return count;
    }

    // Standard DFS on matrix
    private static void dfs(int[][] adj, boolean[] visited, int node) {
        visited[node] = true;
        for (int j = 0; j < adj.length; j++) {
            if (adj[node][j] == 1 && !visited[j]) {
                dfs(adj, visited, j);
            }
        }
    }

    public static void main(String[] args) {
        int[][] adj = {
            {1, 0, 0, 1},
            {0, 1, 1, 0},
            {0, 1, 1, 0},
            {1, 0, 0, 1}
        };

        int result = findCircleNum(adj);
        System.out.println("Number of provinces: " + result); // Output: 2
    }
}





BFS Solution 


import java.util.*;

public class NumberOfProvincesBFS {

    public static int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean[] visited = new boolean[n];
        int count = 0;

        // Loop through each city
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                bfs(isConnected, visited, i);
                count++; // One connected component found
            }
        }

        return count;
    }

    private static void bfs(int[][] adj, boolean[] visited, int start) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int node = queue.poll();
            for (int j = 0; j < adj.length; j++) {
                if (adj[node][j] == 1 && !visited[j]) {
                    queue.offer(j);
                    visited[j] = true;
                }
            }
        }
    }

    public static void main(String[] args) {
        int[][] adj = {
            {1, 0, 0, 1},
            {0, 1, 1, 0},
            {0, 1, 1, 0},
            {1, 0, 0, 1}
        };

        int result = findCircleNum(adj);
        System.out.println("Number of provinces: " + result); // Output: 2
    }
}
Time complexity is O(v*v)
Space - O(v) ---- for visited
