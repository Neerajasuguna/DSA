

wherever it is considered that a cycle is present we make check[node]= 0;

 after exploring all paths we are sure that no cycle is present so we make checl[node] = 1;

Solution is similar to detect cycle in directed grapgh , ust to figure out safe nodes we use check[node]



import java.util.*;

class Solution {
    private boolean dfsCheck(int node, List<List<Integer>> adj, int[] vis, int[] pathVis, int[] check) {
    vis[node] = 1;           // Mark current node as visited
    pathVis[node] = 1;       // Mark current node in current path
    check[node] = 0;         // Assume it is unsafe until proven otherwise

    for (int neighbor : adj.get(node)) {
        if (vis[neighbor] == 0) {
            // Not visited => DFS
            if (dfsCheck(neighbor, adj, vis, pathVis, check)) {
                check[node] = 0;  // Cycle found downstream
                return true;
            }
        } else if (pathVis[neighbor] == 1) {
            // Already visited AND on current path => cycle detected
            check[node] = 0;
            return true;
        }
    }

    // No cycle detected in this path
    check[node] = 1;       // Mark node as safe
    pathVis[node] = 0;     // Unmark current node from path
    return false;          // No cycle found
}

    public List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {
        int[] vis = new int[V];
        int[] pathVis = new int[V];
        int[] check = new int[V];
        List<Integer> safeNodes = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            if (vis[i] == 0) {
                dfsCheck(i, adj, vis, pathVis, check);
            }
        }

        for (int i = 0; i < V; i++) {
            if (check[i] == 1) {
                safeNodes.add(i);
            }
        }

        return safeNodes;
    }

    // Sample usage
    public static void main(String[] args) {
        Solution sol = new Solution();
        int V = 7;
        int[][] edges = {
            {1, 2},
            {2, 3},
            {5},
            {0},
            {5},
            {},
            {}
        };

        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < edges.length; i++) {
            for (int j = 0; j < edges[i].length; j++) {
                adj.get(i).add(edges[i][j]);
            }
        }

        List<Integer> result = sol.eventualSafeNodes(V, adj);
        System.out.println(result);  // Output: [2, 4, 5, 6]
    }
}





using BFS Khan Based Approach 
Idea:
In the original graph, a safe node is one from which all paths lead to terminal nodes.
In the reversed graph, a terminal node becomes a source node.
We can apply Kahnâ€™s Topological Sort on the reversed graph starting from terminal nodes (which become sources).
Nodes that get processed in this topological sort are safe nodes.




import java.util.*;

public class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        List<List<Integer>> revGraph = new ArrayList<>();
        int[] outDegree = new int[n];

        // Initialize reverse graph
        for (int i = 0; i < n; i++) {
            revGraph.add(new ArrayList<>());
        }

        // Build reverse graph and compute outDegrees
        for (int u = 0; u < n; u++) {
            for (int v : graph[u]) {
                revGraph.get(v).add(u); // reverse edge
            }
            outDegree[u] = graph[u].length; // outdegree of original node
        }

        // Queue for BFS
        Queue<Integer> q = new LinkedList<>();

        // Add terminal nodes (out-degree = 0)
        for (int i = 0; i < n; i++) {
            if (outDegree[i] == 0) {
                q.add(i);
            }
        }

        // Array to mark safe nodes
        boolean[] safe = new boolean[n];

        // BFS
        while (!q.isEmpty()) {
            int node = q.poll();
            safe[node] = true;
            for (int neighbor : revGraph.get(node)) {
                outDegree[neighbor]--;
                if (outDegree[neighbor] == 0) {
                    q.add(neighbor);
                }
            }
        }

        // Collect safe nodes
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (safe[i]) result.add(i);
        }

        return result;
    }
}

