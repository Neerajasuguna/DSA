



public class Solution {

    private void dfs(List<List<Integer>> adj, List<Integer> res, int source, boolean[] visited) {
        visited[source] = true;
        res.add(source);

        for (Integer node : adj.get(source)) {
            if (!visited[node]) {
                dfs(adj, res, node, visited);
            }
        }
    }

    public List<Integer> dfsOfGraph(int V, List<List<Integer>> adj) {
        boolean[] visited = new boolean[V];
        List<Integer> res = new ArrayList<>();
        dfs(adj, res, 0, visited); // Assuming DFS starts from node 0
        return res;
    }
}



Time: O(V + E) â€” visits each vertex and edge once

Space: O(V) for visited + recursion stack
