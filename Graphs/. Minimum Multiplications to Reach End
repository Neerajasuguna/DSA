
Problem -https://www.geeksforgeeks.org/problems/minimum-multiplications-to-reach-end/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=minimum-multiplications-to-reach-end 

Notes- https://takeuforward.org/graph/g-39-minimum-multiplications-to-reach-end/

Video - https://www.youtube.com/watch?v=_BvEJ3VIDWw&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=39


Intuition :
Approach:

This problem can be visualized as a graph problem as we need to find the minimum number of steps to reach an end number from the start following a number of multiplications. We would be solving it using Dijkstra's Algorithm.

Initial configuration:

Queue: Define a Queue which would contain pairs of the type {steps, num }, where ‘steps’ indicates the currently updated value of no. of steps taken to reach from source to the current ‘num’.
Distance Array: Define a distance array that would contain the minimum no. of multiplications/distance from the start number to the current number. If a cell is marked as ‘infinity’ then it is treated as unreachable/unattained.
Start and End: Define the start and the end value which we have to reach through a series of multiplications.
The Algorithm consists of the following steps :

Start by creating a queue that stores the step-num pairs in the form {steps, num} and a dist array with each node initialized with a very large number ( to indicate that they’ve not been attained initially). The size of the ‘dist’ array is set to 100000 because it is the maximum number of distinct numbers that can be generated.
We push the start number to the queue along with its steps marked as ‘0’ initially because we’ve just started the algorithm.
Pop the element from the front of the queue and look out for its adjacent nodes (here, adjacent nodes can be regarded as the numbers which we get when we multiply the start number by each element from the arr).
If the current dist value for a number is better than the previous distance indicated by the distance array, we update the distance/steps in the array and push it to the queue.
We repeat the above three steps until the queue becomes empty or we reach the end number.
Return the calculated number of steps after we reach the end number. If the queue becomes empty and we don’t encounter the required number, return ‘-1’ indicating that the following number is unattainable by multiplying the start number any number of times.


QUEUE <steps, prod>

distance array we will be using 










class Solution {
  public:
    int minimumMultiplications(vector<int>& arr, int start, int end) {
        // code here
        int n =arr.size();
        
        queue<pair<int,int>>q;
        vector<int>dist(100000,1e9);
        dist[start]=0;
        q.push({0,start});
        while(!q.empty()){
            pair<int,int> x=q.front();
            int multip=x.first;
            int prod=x.second;
            q.pop();
            if(prod==end)
            return multip;
            
            for(int i=0;i<n;i++){
                int num=(arr[i]*prod)%100000;
                if(multip+1<dist[num]){
                    
                dist[num]=multip+1;
                if(num==end)
                return multip+1;
                    q.push({multip+1,num});
                }
                
            }
        }
        return -1;
    }
};





Output : 

2

Time Complexity : O(100000 * N) 

Where ‘100000’ are the total possible numbers generated by multiplication (hypothetical) and N = size of the array with numbers of which each node could be multiplied.

Space Complexity :  O(100000 * N) 

Where ‘100000’ are the total possible numbers generated by multiplication (hypothetical) and N = size of the array with numbers of which each node could be multiplied. 100000 * N is the max possible queue size. The space complexity of the dist array is constant.
