
There are a total of N tasks, labeled from 0 to N-1. Some tasks may have prerequisites, for example to do task 0 you have to first complete task 1, which is expressed as a pair: [0, 1]
Given the total number of tasks N and a list of prerequisite pairs P, find if it is possible to finish all tasks.


Example 1:

Input: 
N = 4, P = 3
prerequisites = {{1,0},{2,1},{3,2}}
Output:
Yes
Explanation:
To do task 1 you should have completed
task 0, and to do task 2 you should 
have finished task 1, and to do task 3 you 
should have finished task 2. So it is possible.
Example 2:

Input:
N = 2, P = 2
prerequisites = {{1,0},{0,1}}
Output:
No
Explanation:
To do task 1 you should have completed
task 0, and to do task 0 you should
have finished task 1. So it is impossible.

Your task:
You donâ€™t need to read input or print anything. Your task is to complete the function isPossible() which takes the integer N denoting the number of tasks, P denoting the number of prerequisite pairs and prerequisite as input parameters and returns true if it is possible to finish all tasks otherwise returns false. 


Expected Time Complexity: O(N + P)
Expected Auxiliary Space: O(N + P)



problem link -https://www.geeksforgeeks.org/problems/prerequisite-tasks/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=prerequisite-tasks

notes- https://takeuforward.org/data-structure/course-schedule-i-and-ii-pre-requisite-tasks-topological-sort-g-24/
Intuition  : 













class Solution {
public:
	bool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {
queue<int>q;
 vector<int>adj[N];
 for(auto it :prerequisites){
     adj[it.second].push_back(it.first);
 }

vector<int>indegree(N,0);
for(auto it:prerequisites){
    indegree[it.first]++;
}
int count=0;

for(int i=0;i<N;i++){
    if(indegree[i]==0)
    q.push(i);
}

     while(!q.empty()){
         int x= q.front();
         q.pop();
         count++;
          for(auto it:adj[x]){
              indegree[it]--;
              if(indegree[it]==0)
              q.push(it);
          }
         
     }
     return (count==N);
	}
};
