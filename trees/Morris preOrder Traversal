
problem - https://www.naukri.com/code360/problems/preorder-traversal_3838888?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTabValue=SUBMISSION

Video Explanation -https://www.youtube.com/watch?v=80Zug6D1_r4




Algorithm:
Step 1:Initialise a current to traverse the tree. Set current to the root of the Binary Tree.

Step 2: While the current is not null: If the current node has no left child, print the current node's value and move to the right child ie. set current to its right child.


Step 3: If the current node has a left child, we find the in-order predecessor of the current node. This in-order predecessor is the rightmost node in the left subtree or the left subtree's rightmost node.

      If the right child of the in-order predecessor is null:

              Set the right child to the current node.
              Print the value of the current node as preorder traverses the tree in the inorder: Root, Left then Right.
              Move to the left child (i.e., set current to its left child).
      If the right child of the in-order predecessor is not null:

              Revert the changes made in the previous step by setting the right child as null.
              Move to the right child (i.e., set current to its right child).
Repeat steps 2 and 3 until the end of the tree is reached.


















#include <bits/stdc++.h> 
/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/


TreeNode *findinOrderPredecessor(TreeNode *temp, TreeNode *curr) {
        while (temp->right != NULL && temp->right != curr)
            temp = temp->right;
        return temp;
    }
vector<int> getPreOrderTraversal(TreeNode *root)
{
    // Write your code here.

    TreeNode* curr = root;
        vector<int> res;
        if (root == NULL)
            return res;
        while (curr != NULL) {
            if (curr->left == NULL) {
                res.push_back(curr->data);
                curr = curr->right;
            } else {
                TreeNode* predecessor =
                    findinOrderPredecessor(curr->left, curr);
                if (predecessor->right == NULL) {

                    predecessor->right = curr;
                    res.push_back(curr->data);
                    curr = curr->left;
                } else {
                    predecessor->right = NULL;
                    curr = curr->right;
                }
            }
        }
        return res;
    }

    


