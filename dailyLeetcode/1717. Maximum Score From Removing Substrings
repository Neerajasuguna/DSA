
/*You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

 

Example 1:

Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.
Example 2:

Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20*/





Video -https://www.youtube.com/watch?v=jxng2IcJyCk
Problem -https://leetcode.com/problems/maximum-score-from-removing-substrings/description/?envType=daily-question&envId=2024-07-12




class Solution {
public:
    int maximumGain(string s, int x, int y) {
       string s1="ab";
       string s2="ba";

      if(y>x){
        swap(s1,s2);
        swap(x,y);
      }
        
        return maxPoints(s,s1,x)+maxPoints(s,s2,y);
    }

    int maxPoints(string &s, string subString,int point){
        cout<<s<<" "<<subString<<" "<<point<<endl;
        stack<char>st;
 
        int count=0;
        for(int i=0;i<s.size();i++){
            if(st.empty()){
                st.push(s[i]);
            }
            else{

            if(st.top()==subString[0]&& s[i]==subString[1]){
                st.pop();
                count+=point;
            }
            else
            st.push(s[i]);
        }
        }

        s="";
        while(!st.empty()){
            s+=st.top();
            st.pop();
        }
        reverse(s.begin(),s.end());
        return count;
    }
};
