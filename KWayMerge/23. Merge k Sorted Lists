


You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []




Approach
### ✅ Merge K Sorted Lists – Divide and Conquer Approach

- This approach uses a **divide and conquer** strategy to merge multiple sorted lists into one.
- Start with `k` sorted linked lists.
- Repeatedly **merge lists in pairs** until only one sorted list remains.

#### 🔁 Merging Process:
- In each iteration:
  - Merge adjacent pairs of lists → resulting in `k / 2` lists.
  - Continue the process:
    - `k → k/2 → k/4 → ... → 1`

#### 🔧 How to Merge Two Lists:
- Use two pointers, each pointing to the head of a list.
- Compare the current nodes:
  - If the first list’s node value ≤ second list’s node value → add it to the merged list.
  - Otherwise → add the second list’s node.
- Move the pointer forward in the list from which the node was added.
- Repeat until both lists are fully merged.

#### ✅ Result:
- After `log₂(k)` merge rounds, we get a single fully merged, sorted list.




Solution 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode Merge2Lists(ListNode head1, ListNode head2){
    ListNode dummy = new ListNode(0); 
    ListNode prev = new ListNode(0);
    prev = dummy;

    while(head1!=null && head2!=null ){
        if(head1.val <= head2.val){
            prev.next = head1;
            head1 = head1.next;
        }
        else if(head1.val > head2.val){
            prev.next = head2;
            head2 = head2.next;
        }
        prev=prev.next;
    }

    if(head1!=null){
        prev.next=head1;
        }
        
    else{
        prev.next = head2;
    }
    return dummy.next;
}
  

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length > 0){
        int step = 1;
        while (step < lists.length){
            for (int i=0; i<lists.length - step ; i = i+(step *2)){
                lists[i] = Merge2Lists(lists[i], lists[i + step]);
            }
            step *= 2;
        }
        return lists[0];
    }
	return null;
    }
        
}



Time Complexity 
O(nlogk)
Sapce Complexity - O(1)



### 🕒 Time Complexity: O(n log k)

Where:
- `n` = total number of nodes across all lists
- `k` = number of sorted linked lists

---

### 🧠 Intuition Behind O(n log k):

- Each merge operation between two sorted lists takes linear time relative to the total number of nodes being merged.
- We use a **divide and conquer** strategy to reduce the total number of merges.

#### 🔁 Merging Process:

- First round: `k` lists → `k / 2` merged lists
- Second round: `k / 2` → `k / 4`
- ...
- Final round: 1 list remains

There are `log₂(k)` levels of merging.

#### 📦 Work Done at Each Level:

- At each level, all `n` nodes are merged once.
- So, work per level = `O(n)`
- Total work across all levels = `O(n) * log k`

---

### ✅ Final Time Complexity:

**O(n log k)**  
This is significantly more efficient than a naive approach (`O(k * n)`) and is ideal for merging large numbers of sorted lists.



