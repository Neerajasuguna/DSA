
You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

 

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
 

Constraints:

1 <= nums1.length, nums2.length <= 105
-109 <= nums1[i], nums2[i] <= 109
nums1 and nums2 both are sorted in non-decreasing order.
1 <= k <= 104
k <= nums1.length * nums2.length






## 🧠 Solution Summary

Let’s review the solution we’ve used to solve this problem:

1. **Initial Heap Population**:  
   We start by pairing **only the first element of the second list (`nums2[0]`)** with each element of the first list (`nums1`).  
   The sum of each pair and their respective indexes `(i, j)` are stored in a **min-heap**.

2. **Iterative Pair Expansion**:  
   In a loop, we do the following:
   - Pop the pair with the smallest sum from the heap and add it to the result list.
   - Form a new pair by incrementing the index of the second list (i.e., next element in `nums2`) while keeping the first element the same.
   - Push the new pair and its sum back into the min-heap.
   - Continue until the heap is empty or we have found `k` pairs.








solution 

class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        int len1 = nums1.length;
        List<List<Integer>> pairs = new ArrayList<>();

        if (nums1.length == 0 || nums2.length == 0 || k == 0) return pairs;

        // Min-heap: [sum, i, j]
        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));

        // Add first element of each pair (nums1[i] + nums2[0])
        for (int i = 0; i < Math.min(k, len1); i++) {
            minHeap.offer(new int[]{nums1[i] + nums2[0], i, 0});
        }

        int count = 1;

        while (!minHeap.isEmpty() && count <= k) {
            int[] current = minHeap.poll();
            int i = current[1];
            int j = current[2];

            pairs.add(Arrays.asList(nums1[i], nums2[j]));

            if (j + 1 < nums2.length) {
                minHeap.offer(new int[]{nums1[i] + nums2[j + 1], i, j + 1});
            }

            count++;
        }

        return pairs;
    
    }
}





---

## ⏱️ Time Complexity

- **First Loop**:  
  - Pushes at most `m` pairs onto the heap, where `m = min(k, n1)` and `n1` is the length of `nums1`.
  - Each heap operation costs `O(log m)`.
  - **Total: O(m log m)**

- **Second Loop**:
  - Runs up to `k` times (once per pair added to the result).
  - Each iteration involves one pop and (potentially) one push, each costing `O(log m)`.
  - **Total: O(k log m)**

- **Overall Time Complexity**:
  \[
  O((m + k) \log m) \quad \text{where} \quad m = \min(k, n1)
  \]
  Since `m` is at most `k`, this simplifies to:
  \[
  O(k \log m)
  \]

---

## 🧠 Space Complexity

- The heap holds at most `m = min(k, n1)` elements.
- **Space Complexity: O(m)**
