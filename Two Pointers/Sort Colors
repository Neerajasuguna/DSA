
Given an array, colors, which contains a combination of the following three elements:

0 (Representing red)

1 (Representing white)

2 (Representing blue)

Sort the array in place so that the elements of the same color are adjacent, and the final order is: red (0), then white (1), and then blue (2).




Solution 

To summarize, solving this problem involves the following steps:

Traverse the array and swap elements, as required, to organize them correctly.

If the encountered color is red, swap its value with that of the start pointer. If the color is blue, swap its value with that of the end pointer.

White elements are skipped, and pointers are adjusted accordingly.

The array is sorted when the end pointer moves to the left of the current pointer.



class Solution {
    public static int[] sortColors(int[] colors) {

        int start = 0;
        int current = 0;
        int end = colors.length - 1;

        while (current <= end) {

            if (colors[current] == 0) {
                int temp = colors[start];
                colors[start] = colors[current];
                colors[current] = temp;
                
                current++;
                start++;
            }

            else if (colors[current] == 1) {
                current++;
            }

            else {
                
                int temp = colors[current];
                colors[current] = colors[end];
                colors[end] = temp;

                end--;
            }
        }

        return colors;
    }


Time COmplexity - O(n)
Space Complexity - O(1)
