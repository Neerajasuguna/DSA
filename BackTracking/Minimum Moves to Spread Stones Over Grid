You are given a 3×3 grid, where each cell contains 0 to 9 stones. The total number of stones is guaranteed to be 9. 
Your task is to find the minimum number of moves required to place exactly 1 stone in each cell.


Grid size: 3 x 3

Each move: Transfer 1 stone to an adjacent cell (up, down, left, or right)

Only one stone per move

Total stones = 9 → so you must reach a state where every cell has exactly 1 stone




Explanation: 

Step 1: Identify all cells with:

More than 1 stone → store extra stones in surplus list

0 stones → store in deficit list

Step 2: For each surplus stone, find the nearest available deficit cell (using Manhattan distance), and add the distance to the move count.



Solution 

import java.util.*;

public class StoneBalancer {

    public static int minMovesToBalance(int[][] grid) {
        List<int[]> surplus = new ArrayList<>();
        List<int[]> deficit = new ArrayList<>();

        // Step 1: Gather all surplus and deficit positions
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                int stones = grid[i][j];
                if (stones > 1) {
                    for (int k = 0; k < stones - 1; k++) {
                        surplus.add(new int[]{i, j});
                    }
                } else if (stones == 0) {
                    deficit.add(new int[]{i, j});
                }
            }
        }

        // Step 2: Match each surplus stone to a deficit cell using greedy approach
        boolean[] used = new boolean[deficit.size()];
        int moves = 0;

        for (int[] from : surplus) {
            int minDist = Integer.MAX_VALUE;
            int minIdx = -1;

            for (int i = 0; i < deficit.size(); i++) {
                if (!used[i]) {
                    int[] to = deficit.get(i);
                    int dist = Math.abs(from[0] - to[0]) + Math.abs(from[1] - to[1]);
                    if (dist < minDist) {
                        minDist = dist;
                        minIdx = i;
                    }
                }
            }

            if (minIdx != -1) {
                used[minIdx] = true;
                moves += minDist;
            }
        }

        return moves;
    }

    // Example usage
    public static void main(String[] args) {
        int[][] grid = {
            {1, 3, 0},
            {0, 1, 0},
            {1, 2, 1}
        };

        System.out.println("Minimum moves: " + minMovesToBalance(grid)); // Output: 4
    }
}





Time COmplexity : 
Worst case: O(k^2) where k ≤ 9 → practically O(1) for 3×3 grid

Space Complexity 
O(1)
