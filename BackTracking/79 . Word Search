Leetcode : https://leetcode.com/problems/word-search/

Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.





solution 

Approach:
Iterate through each cell in the grid.
If the first letter of word matches the current cell, start a Depth-First Search (DFS).
In DFS:
Check if the current position is within bounds and matches the next character in word.
Temporarily mark the cell as visited.
Recur in four directions (up, down, left, right).
Restore the cell after recursion.
If the word is found, return true; otherwise, return false.



class Solution {
    private boolean dfs(char[][] board,int row, int col, int index, String word){
        if(index==word.length())
        return true;

        if(row<0||col<0||row>=board.length||col>=board[0].length||
        board[row][col]!=word.charAt(index))
        return false;
        char temp =board[row][col];
        board[row][col]='*';
        
        boolean found=dfs(board,row+1,col,index+1,word)||dfs(board,row,col-1,index+1,word)||
        dfs(board,row-1,col,index+1,word)||dfs(board,row,col+1,index+1,word);
        board[row][col]=temp;
        return found;
    
    }
    public boolean exist(char[][] board, String word) {
        int m =board.length;
        int n=board[0].length;

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(dfs(board,i,j,0,word))
                return true;
            }
        }
        return false;
    }
}







### **Time Complexity: \(O(m \times n \times 4^L)\)**  
- We start DFS from every cell in the **m Ã— n** grid â†’ **\(O(m *n)\)**.  
- At each step, DFS explores **4 possible directions** (up, down, left, right).  
- The DFS depth is at most **L** (length of the word), leading to **\(4^L\)** recursive calls in the worst case.  
- So, the total worst-case time complexity is **\(O(m*n* 4^L))**.  

### **Space Complexity: \(O(L)\)**  
- The recursion stack goes up to **L** levels deep (since we are searching for a word of length L).  
- No extra data structures are used apart from modifying the board temporarily.  
- So, the worst-case space complexity is **\(O(L)\)**.  

This solution is exponential in the worst case but efficient for small grids and short words. ðŸš€
