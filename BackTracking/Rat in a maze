


If you only want to check whether a path exists in the maze (from (0, 0) to (n-1, n-1)) and return a boolean


public class RatInMazeBoolean {

    public static boolean isPathExists(int[][] maze, int n) {
        boolean[][] visited = new boolean[n][n];

        if (maze[0][0] == 0 || maze[n-1][n-1] == 0)
            return false;

        return dfs(0, 0, maze, visited, n);
    }

    private static boolean dfs(int x, int y, int[][] maze, boolean[][] visited, int n) {
        // Base case: reached destination
        if (x == n - 1 && y == n - 1) {
            return true;
        }

        visited[x][y] = true;

        // Move Down
        if (isSafe(x + 1, y, maze, visited, n) && dfs(x + 1, y, maze, visited, n))
            return true;

        // Move Right
        if (isSafe(x, y + 1, maze, visited, n) && dfs(x, y + 1, maze, visited, n))
            return true;

        // Move Up
        if (isSafe(x - 1, y, maze, visited, n) && dfs(x - 1, y, maze, visited, n))
            return true;

        // Move Left
        if (isSafe(x, y - 1, maze, visited, n) && dfs(x, y - 1, maze, visited, n))
            return true;

        return false; // No valid move found from current cell
    }

    private static boolean isSafe(int x, int y, int[][] maze, boolean[][] visited, int n) {
        return x >= 0 && y >= 0 && x < n && y < n &&
               maze[x][y] == 1 && !visited[x][y];
    }

    public static void main(String[] args) {
        int[][] maze = {
            {1, 0, 0, 0},
            {1, 1, 0, 1},
            {0, 1, 0, 0},
            {1, 1, 1, 1}
        };
        int n = maze.length;
        boolean pathExists = isPathExists(maze, n);
        System.out.println("Is path exists? " + pathExists);
    }
}



‚úÖ Time and Space Complexity ‚Äî Rat in a Maze (returns boolean)

Assumptions:
- Maze is N x N
- Rat can move in 4 directions: Down, Right, Up, Left
- A visited[][] matrix is used to avoid revisiting cells
- DFS stops as soon as one path is found

-----------------------------
‚è±Ô∏è Time Complexity: O(N^2)
-----------------------------
- Each cell is visited at most once due to the visited[][] check
- For N x N grid, there are N^2 cells
- From each cell, we try 4 directions (constant factor)
- So, the worst-case number of recursive calls is proportional to N^2

=> Time Complexity = O(N^2)

-------------------------------
üß† Space Complexity: O(N^2)
-------------------------------
1. visited[N][N] ‚Üí O(N^2)
2. Recursion stack (worst case all cells on stack) ‚Üí O(N^2)

=> Total Space = O(N^2) + O(N^2) = O(N^2)





If i have to return paths


import java.util.*;

public class RatInMaze {
    public static List<String> findPaths(int[][] maze, int n) {
        List<String> paths = new ArrayList<>();
        boolean[][] visited = new boolean[n][n];

        if (maze[0][0] == 0 || maze[n-1][n-1] == 0)
            return paths;

        solve(0, 0, maze, n, visited, "", paths);
        return paths;
    }

    private static void solve(int x, int y, int[][] maze, int n,
                              boolean[][] visited, String path, List<String> paths) {

        // Base condition: destination reached
        if (x == n - 1 && y == n - 1) {
            paths.add(path);
            return;
        }

        visited[x][y] = true;

        // Move Down
        if (isSafe(x + 1, y, maze, visited, n))
            solve(x + 1, y, maze, n, visited, path + "D", paths);

        // Move Left
        if (isSafe(x, y - 1, maze, visited, n))
            solve(x, y - 1, maze, n, visited, path + "L", paths);

        // Move Right
        if (isSafe(x, y + 1, maze, visited, n))
            solve(x, y + 1, maze, n, visited, path + "R", paths);

        // Move Up
        if (isSafe(x - 1, y, maze, visited, n))
            solve(x - 1, y, maze, n, visited, path + "U", paths);

        // Backtrack
        visited[x][y] = false;
    }

    private static boolean isSafe(int x, int y, int[][] maze, boolean[][] visited, int n) {
        return x >= 0 && y >= 0 && x < n && y < n &&
               maze[x][y] == 1 && !visited[x][y];
    }

    public static void main(String[] args) {
        int[][] maze = {
            {1, 0, 0, 0},
            {1, 1, 0, 1},
            {0, 1, 0, 0},
            {1, 1, 1, 1}
        };
        int n = maze.length;
        List<String> result = findPaths(maze, n);

        if (result.isEmpty()) {
            System.out.println("No path found.");
        } else {
            System.out.println("Paths found:");
            for (String path : result) {
                System.out.println(path);
            }
        }
    }
}



Storing all paths: O(k * N^2) ‚Äî since there can be k paths, each of length up to N^2






üß† Should visited[x][y] = true be unmarked in DFS?

It depends on the goal of your DFS function.

--------------------------------------------------
‚úÖ Case 1: Return boolean (only check if path exists)
--------------------------------------------------
Code structure:
if (isSafe(...) && dfs(...)) return true;

- You return true as soon as any path to the destination is found
- You are NOT exploring all possible paths
- So, you DO NOT need to unmark visited[x][y]
- Once visited, the cell stays marked until the search ends

=> ‚úÖ No need to set visited[x][y] = false

--------------------------------------------------
üîÅ Case 2: Return all paths (backtracking)
--------------------------------------------------
Code structure:
paths.add(path);
visited[x][y] = false; // backtracking

- You must explore all possible valid paths
- After exploring from a cell, you must unmark it to allow revisiting it in other paths

=> ‚úÖ You MUST set visited[x][y] = false during backtracking

--------------------------------------------------
‚úÖ Summary:

| Goal                        | Unmark visited?     |
|-----------------------------|---------------------|
| Return boolean (one path)   | ‚ùå No               |
| Return all paths (backtrack)| ‚úÖ Yes              |

