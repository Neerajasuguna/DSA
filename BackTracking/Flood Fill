Perform flood fill by updating the values of the four directionally connected cells (up, down, left, right) that have the same value as the source cell, 
changing them to the target value.


Start at cell (sr, sc)

Let the source value be the value at grid[sr][sc]

Update that cell and recursively update any adjacent cells (up, down, left, right) that have the same source value

Change all such connected cells to the target value

Do not update diagonally connected cells

If no neighboring cell has the source value, only update the source cell itself and return the modified grid




Solution 


public class FloodFill {

    public int[][] floodFill(int[][] grid, int sr, int sc, int target) {
        int original = grid[sr][sc];
        if (original == target) return grid; // Avoid infinite recursion

        dfs(grid, sr, sc, original, target);
        return grid;
    }

    private void dfs(int[][] grid, int r, int c, int original, int target) {
        int rows = grid.length;
        int cols = grid[0].length;

        // Base case: Out of bounds or not the original color
        if (r < 0 || r >= rows || c < 0 || c >= cols || grid[r][c] != original) {
            return;
        }

        // Change the color
        grid[r][c] = target;

        // Directions: right, down, up, left
        int[][] adjacentCells = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

        for (int[] dir : adjacentCells) {
            int newRow = r + dir[0];
            int newCol = c + dir[1];
            dfs(grid, newRow, newCol, original, target);
        }
    }

    // Sample usage
    public static void main(String[] args) {
        FloodFill ff = new FloodFill();

        int[][] grid = {
            {1, 1, 0, 2},
            {1, 1, 0, 0},
            {0, 0, 1, 1},
            {2, 0, 1, 1}
        };

        int sr = 1, sc = 1, target = 9;

        int[][] result = ff.floodFill(grid, sr, sc, target);

        for (int[] row : result) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }
}


- DFS (recursive): O(m × n) in worst case due to recursion stack
- BFS (with queue): O(m × n) for the queue
